// <auto-generated />
using System;
using Cases.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cases.Infrastructure.Migrations
{
    [DbContext(typeof(CasesApplicationDbContext))]
    partial class CasesApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cases.Core.Models.Case", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("IncidentDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReportedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportingOfficerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseNumber")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReportingOfficerId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Cases.Core.Models.CaseAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CaseActions");
                });

            modelBuilder.Entity("Cases.Core.Models.IncidentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IncidentTypes");
                });

            modelBuilder.Entity("Cases.Core.Models.Joins.CaseIncidentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IncidentTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("IncidentTypeId");

                    b.ToTable("CaseIncidentTypes");
                });

            modelBuilder.Entity("Cases.Core.Models.Joins.CaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseUsers");
                });

            modelBuilder.Entity("Cases.Core.Models.CaseAction", b =>
                {
                    b.HasOne("Cases.Core.Models.Case", "Case")
                        .WithMany("CaseActions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Cases.Core.Models.Joins.CaseIncidentType", b =>
                {
                    b.HasOne("Cases.Core.Models.Case", "Case")
                        .WithMany("CaseIncidentType")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cases.Core.Models.IncidentType", "IncidentType")
                        .WithMany("CaseIncidentType")
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("IncidentType");
                });

            modelBuilder.Entity("Cases.Core.Models.Joins.CaseUser", b =>
                {
                    b.HasOne("Cases.Core.Models.Case", "Case")
                        .WithMany("CaseUsers")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Cases.Core.Models.Case", b =>
                {
                    b.Navigation("CaseActions");

                    b.Navigation("CaseIncidentType");

                    b.Navigation("CaseUsers");
                });

            modelBuilder.Entity("Cases.Core.Models.IncidentType", b =>
                {
                    b.Navigation("CaseIncidentType");
                });
#pragma warning restore 612, 618
        }
    }
}
