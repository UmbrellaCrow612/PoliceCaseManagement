async function computeDeviceFingerprint() {
    const fingerprint = {
        hardware: {},
        browser: {},
        permissions: {},
        timestamp: new Date().toISOString()
    };

    // Request permissions and gather device info
    try {
        // Location permission
        if ('geolocation' in navigator) {
            const permission = await navigator.permissions.query({ name: 'geolocation' });
            if (permission.state === 'granted') {
                const position = await new Promise((resolve, reject) => {
                    navigator.geolocation.getCurrentPosition(resolve, reject);
                });
                fingerprint.permissions.location = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    accuracy: position.coords.accuracy
                };
            }
        }

        // Camera permission
        if ('mediaDevices' in navigator) {
            const cameraPermission = await navigator.permissions.query({ name: 'camera' });
            if (cameraPermission.state === 'granted') {
                const devices = await navigator.mediaDevices.enumerateDevices();
                fingerprint.permissions.cameras = devices
                    .filter(device => device.kind === 'videoinput')
                    .map(camera => ({
                        id: camera.deviceId,
                        label: camera.label
                    }));
            }
        }

        // Hardware information
        fingerprint.hardware = {
            screen: {
                width: window.screen.width,
                height: window.screen.height,
                colorDepth: window.screen.colorDepth,
                pixelRatio: window.devicePixelRatio,
            },
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            language: navigator.language,
            platform: navigator.platform,
            cores: navigator.hardwareConcurrency,
            memory: navigator.deviceMemory,
            connection: navigator.connection ? {
                type: navigator.connection.effectiveType,
                downlink: navigator.connection.downlink
            } : null
        };

        // Browser fingerprinting
        fingerprint.browser = {
            userAgent: navigator.userAgent,
            cookiesEnabled: navigator.cookieEnabled,
            doNotTrack: navigator.doNotTrack,
            plugins: Array.from(navigator.plugins).map(plugin => ({
                name: plugin.name,
                description: plugin.description
            })),
        };

        // Canvas fingerprinting
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = 200;
        canvas.height = 200;

        // Draw some shapes and text
        ctx.textBaseline = 'top';
        ctx.font = '14px Arial';
        ctx.fillStyle = '#f60';
        ctx.fillRect(125,1,62,20);
        ctx.fillStyle = '#069';
        ctx.fillText('Fingerprint', 2, 15);
        ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
        ctx.fillRect(2, 100, 100, 50);
        
        fingerprint.browser.canvasHash = canvas.toDataURL();

        // WebGL fingerprinting
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        if (gl) {
            fingerprint.browser.webgl = {
                vendor: gl.getParameter(gl.VENDOR),
                renderer: gl.getParameter(gl.RENDERER),
                version: gl.getParameter(gl.VERSION)
            };
        }

        // Audio fingerprinting
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const analyser = audioContext.createAnalyser();
        oscillator.connect(analyser);
        oscillator.frequency.setValueAtTime(1000, audioContext.currentTime);
        const dataArray = new Float32Array(analyser.frequencyBinCount);
        analyser.getFloatFrequencyData(dataArray);
        fingerprint.browser.audioHash = dataArray.slice(0, 10).join(',');
        audioContext.close();

        // Generate final hash
        const fingerprintString = JSON.stringify(fingerprint);
        const fingerprintHash = await crypto.subtle.digest('SHA-256', 
            new TextEncoder().encode(fingerprintString));
        
        // Convert hash to hex string
        const hashArray = Array.from(new Uint8Array(fingerprintHash));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        
        return {
            fingerprint,
            hash: hashHex
        };
    } catch (error) {
        console.error('Error computing fingerprint:', error);
        return {
            error: error.message,
            partialFingerprint: fingerprint
        };
    }
}

// Usage example:
async function verifyDevice() {
    try {
        const result = await computeDeviceFingerprint();
        
        if (result.error) {
            console.warn('Partial fingerprint generated:', result);
            return false;
        }
        
        console.log('Full fingerprint:', result.fingerprint);
        console.log('Fingerprint hash:', result.hash);
        
        // Here you would typically:
        // 1. Compare this fingerprint against known/authorized devices
        // 2. Check if location is within allowed boundaries
        // 3. Verify other security parameters
        
        return true;
    } catch (error) {
        console.error('Device verification failed:', error);
        return false;
    }
}