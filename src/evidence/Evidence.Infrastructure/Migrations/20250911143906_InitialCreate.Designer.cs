// <auto-generated />
using System;
using Evidence.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Evidence.Infrastructure.Migrations
{
    [DbContext(typeof(EvidenceApplicationDbContext))]
    [Migration("20250911143906_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Evidence.Core.Models.Evidence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FileUploadStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedByEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploadedByUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceNumber")
                        .IsUnique();

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("Evidence.Core.Models.Joins.EvidenceTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("EvidenceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EvidenceId");

                    b.HasIndex("TagId");

                    b.ToTable("EvidenceTags");
                });

            modelBuilder.Entity("Evidence.Core.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Evidence.Core.Models.Joins.EvidenceTag", b =>
                {
                    b.HasOne("Evidence.Core.Models.Evidence", "Evidence")
                        .WithMany("EvidenceTags")
                        .HasForeignKey("EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evidence.Core.Models.Tag", "Tag")
                        .WithMany("EvidenceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Evidence.Core.Models.Evidence", b =>
                {
                    b.Navigation("EvidenceTags");
                });

            modelBuilder.Entity("Evidence.Core.Models.Tag", b =>
                {
                    b.Navigation("EvidenceTags");
                });
#pragma warning restore 612, 618
        }
    }
}
