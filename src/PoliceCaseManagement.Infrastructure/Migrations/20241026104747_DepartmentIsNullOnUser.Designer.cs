// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PoliceCaseManagement.Infrastructure.Data;

#nullable disable

namespace PoliceCaseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241026104747_DepartmentIsNullOnUser")]
    partial class DepartmentIsNullOnUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Case", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CasePriority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaseStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastEditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastEditedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CaseNumber")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LastEditedById");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.CrimeScene", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("CrimeScenes");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastEditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastEditedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LastEditedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Evidence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChainOfCustody")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastEditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastEditedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LastEditedById");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Incident", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IncidentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseCrimeScene", b =>
                {
                    b.Property<string>("CaseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CrimeSceneId")
                        .HasColumnType("TEXT");

                    b.HasKey("CaseId", "CrimeSceneId");

                    b.HasIndex("CrimeSceneId");

                    b.ToTable("CaseCrimeScenes");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseDocument", b =>
                {
                    b.Property<string>("CaseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.HasKey("CaseId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CaseDocuments");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseEvidence", b =>
                {
                    b.Property<string>("CaseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EvidenceId")
                        .HasColumnType("TEXT");

                    b.HasKey("CaseId", "EvidenceId");

                    b.HasIndex("EvidenceId");

                    b.ToTable("CaseEvidences");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CasePerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CaseRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("CasePersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseTag", b =>
                {
                    b.Property<string>("CaseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("CaseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CaseTags");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaseId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseUsers");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseVehicle", b =>
                {
                    b.Property<string>("CaseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.HasKey("CaseId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CaseVehicle");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CrimeSceneEvidence", b =>
                {
                    b.Property<string>("CrimeSceneId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EvidenceId")
                        .HasColumnType("TEXT");

                    b.HasKey("CrimeSceneId", "EvidenceId");

                    b.HasIndex("EvidenceId");

                    b.ToTable("CrimeSceneEvidences");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CrimeScenePerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CrimeSceneId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CrimeSceneId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("CrimeScenePersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CrimeSceneVehicle", b =>
                {
                    b.Property<string>("CrimeSceneId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.HasKey("CrimeSceneId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CrimeSceneVehicle");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.IncidentPerson", b =>
                {
                    b.Property<string>("IncidentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonId")
                        .HasColumnType("TEXT");

                    b.HasKey("IncidentId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("IncidentPersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.PropertyPerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyPersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.StatementUser", b =>
                {
                    b.Property<string>("StatementId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("StatementId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("StatementUsers");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.VehiclePerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehiclePersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("TEXT");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Property", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastEditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastEditedById")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LastEditedById");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Statement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastEditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastEditedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordingFileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LastEditedById");

                    b.HasIndex("PersonId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BadgeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeletedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Case", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "CreatedBy")
                        .WithMany("CreatedCases")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "DeletedBy")
                        .WithMany("DeletedCases")
                        .HasForeignKey("DeletedById");

                    b.HasOne("PoliceCaseManagement.Core.Entities.Department", "Department")
                        .WithMany("AssignedCases")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "LastEditedBy")
                        .WithMany("LastEditedCases")
                        .HasForeignKey("LastEditedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Department");

                    b.Navigation("LastEditedBy");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.CrimeScene", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "DeletedBy")
                        .WithMany("DeletedCrimeScenes")
                        .HasForeignKey("DeletedById");

                    b.HasOne("PoliceCaseManagement.Core.Entities.Location", "Location")
                        .WithMany("CrimeScenes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeletedBy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Document", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "CreatedBy")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "DeletedBy")
                        .WithMany("DeletedDocuments")
                        .HasForeignKey("DeletedById");

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "LastEditedBy")
                        .WithMany("LastEditedDocuments")
                        .HasForeignKey("LastEditedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastEditedBy");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Evidence", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "CreatedBy")
                        .WithMany("CreatedEvidences")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "DeletedBy")
                        .WithMany("DeletedEvidences")
                        .HasForeignKey("DeletedById");

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "LastEditedBy")
                        .WithMany("LastEditedEvidences")
                        .HasForeignKey("LastEditedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastEditedBy");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Incident", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Location", "Location")
                        .WithMany("Incidents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseCrimeScene", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("CaseCrimeScenes")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.CrimeScene", "CrimeScene")
                        .WithMany("CaseCrimeScenes")
                        .HasForeignKey("CrimeSceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("CrimeScene");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseDocument", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("CaseDocuments")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Document", "Document")
                        .WithMany("CaseDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseEvidence", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("CaseEvidences")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Evidence", "Evidence")
                        .WithMany("CaseEvidences")
                        .HasForeignKey("EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CasePerson", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("CasePersons")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Person", "Person")
                        .WithMany("CasePersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseTag", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("CaseTags")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Tag", "Tag")
                        .WithMany("CaseTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseUser", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("CaseUsers")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "User")
                        .WithMany("CaseUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CaseVehicle", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CrimeSceneEvidence", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.CrimeScene", "CrimeScene")
                        .WithMany("CrimeSceneEvidences")
                        .HasForeignKey("CrimeSceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Evidence", "Evidence")
                        .WithMany("CrimeSceneEvidences")
                        .HasForeignKey("EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrimeScene");

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CrimeScenePerson", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.CrimeScene", "CrimeScene")
                        .WithMany("CrimeScenePersons")
                        .HasForeignKey("CrimeSceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Person", "Person")
                        .WithMany("CrimeScenePersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrimeScene");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.CrimeSceneVehicle", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.CrimeScene", "CrimeScene")
                        .WithMany("CrimeSceneVehicles")
                        .HasForeignKey("CrimeSceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("CrimeSceneVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrimeScene");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.IncidentPerson", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Incident", "Incident")
                        .WithMany("IncidentPersons")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Person", "Person")
                        .WithMany("IncidentPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.PropertyPerson", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Person", "Person")
                        .WithMany("PropertyPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Property", "Property")
                        .WithMany("PropertyPersons")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.StatementUser", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Statement", "Statement")
                        .WithMany("StatementUsers")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "User")
                        .WithMany("StatementUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Joins.VehiclePerson", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Person", "Person")
                        .WithMany("VehiclePersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("VehiclePersons")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Person", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "DeletedBy")
                        .WithMany("DeletedPersons")
                        .HasForeignKey("DeletedById");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Property", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Location", "Location")
                        .WithMany("Properties")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Report", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.Case", "Case")
                        .WithMany("Reports")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "CreatedBy")
                        .WithMany("CreatedReports")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "DeletedBy")
                        .WithMany("DeletedReports")
                        .HasForeignKey("DeletedById");

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "LastEditedBy")
                        .WithMany("LastEditedReports")
                        .HasForeignKey("LastEditedById");

                    b.Navigation("Case");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastEditedBy");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Statement", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "CreatedBy")
                        .WithMany("CreatedStatements")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "LastEditedBy")
                        .WithMany("LastEditedStatements")
                        .HasForeignKey("LastEditedById");

                    b.HasOne("PoliceCaseManagement.Core.Entities.Person", "Person")
                        .WithMany("Statements")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastEditedBy");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.User", b =>
                {
                    b.HasOne("PoliceCaseManagement.Core.Entities.User", "DeletedBy")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("DeletedById");

                    b.HasOne("PoliceCaseManagement.Core.Entities.Department", "Department")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("DeletedBy");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Case", b =>
                {
                    b.Navigation("CaseCrimeScenes");

                    b.Navigation("CaseDocuments");

                    b.Navigation("CaseEvidences");

                    b.Navigation("CasePersons");

                    b.Navigation("CaseTags");

                    b.Navigation("CaseUsers");

                    b.Navigation("CaseVehicles");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.CrimeScene", b =>
                {
                    b.Navigation("CaseCrimeScenes");

                    b.Navigation("CrimeSceneEvidences");

                    b.Navigation("CrimeScenePersons");

                    b.Navigation("CrimeSceneVehicles");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Department", b =>
                {
                    b.Navigation("AssignedCases");

                    b.Navigation("AssignedUsers");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Document", b =>
                {
                    b.Navigation("CaseDocuments");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Evidence", b =>
                {
                    b.Navigation("CaseEvidences");

                    b.Navigation("CrimeSceneEvidences");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Incident", b =>
                {
                    b.Navigation("IncidentPersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Location", b =>
                {
                    b.Navigation("CrimeScenes");

                    b.Navigation("Incidents");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Person", b =>
                {
                    b.Navigation("CasePersons");

                    b.Navigation("CrimeScenePersons");

                    b.Navigation("IncidentPersons");

                    b.Navigation("PropertyPersons");

                    b.Navigation("Statements");

                    b.Navigation("VehiclePersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Property", b =>
                {
                    b.Navigation("PropertyPersons");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Statement", b =>
                {
                    b.Navigation("StatementUsers");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Tag", b =>
                {
                    b.Navigation("CaseTags");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.User", b =>
                {
                    b.Navigation("CaseUsers");

                    b.Navigation("CreatedCases");

                    b.Navigation("CreatedDocuments");

                    b.Navigation("CreatedEvidences");

                    b.Navigation("CreatedReports");

                    b.Navigation("CreatedStatements");

                    b.Navigation("DeletedCases");

                    b.Navigation("DeletedCrimeScenes");

                    b.Navigation("DeletedDocuments");

                    b.Navigation("DeletedEvidences");

                    b.Navigation("DeletedPersons");

                    b.Navigation("DeletedReports");

                    b.Navigation("DeletedUsers");

                    b.Navigation("LastEditedCases");

                    b.Navigation("LastEditedDocuments");

                    b.Navigation("LastEditedEvidences");

                    b.Navigation("LastEditedReports");

                    b.Navigation("LastEditedStatements");

                    b.Navigation("StatementUsers");
                });

            modelBuilder.Entity("PoliceCaseManagement.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("CaseVehicles");

                    b.Navigation("CrimeSceneVehicles");

                    b.Navigation("VehiclePersons");
                });
#pragma warning restore 612, 618
        }
    }
}
